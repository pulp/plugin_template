---
name: Test bootstrapping a plugin
on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - '*'
jobs:
  lint:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: pulp_catdog

    steps:
      - uses: actions/checkout@v2
        with:
          path: plugin_template
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Lint plugin_template
        working-directory: plugin_template
        run: |
          pip3 install black flake8
          black --version
          black --check --diff plugin-template utils.py
          flake8 --config flake8.cfg plugin-template utils.py
      - name: Bootstrap catdog plugin
        working-directory: plugin_template
        run: |
          .ci/bootstrap_catdog.sh

  # Below this line we include the steps of the ci workflow of the generated plugin

        # dev_requirements contains tools needed for flake8, etc.
      - name: Install requirements
        run: pip3 install -r dev_requirements.txt

      # This check tries to lookup nonexisting commits
      # - name: Check commit message
      #   if: github.event_name == 'pull_request'
      #   env:
      #     GITHUB_CONTEXT: ${{ github.event.pull_request.commits_url }}
      #   run: sh .github/workflows/scripts/check_commit.sh

      # run black separately from flake8 to get a diff
      - name: Run black on pulp_catdog
        run: |
          black --version
          black --check --diff .

      # Lint code.
      - name: Run flake8 on pulp_catdog
        run: |
          flake8 --version
          flake8 --config flake8.cfg

      # check for any files unintentionally left out of MANIFEST.in
      - name: Check manifest
        run: check-manifest

      - name: Check for pulpcore imports outside of pulpcore.plugin
        run: sh .ci/scripts/check_pulpcore_imports.sh

  test:
    runs-on: ubuntu-latest
    # run only after lint finishes
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        env:
          - TEST: pulp
          - TEST: docs
          - TEST: azure
          - TEST: s3
    outputs:
      deprecations-pulp: ${{ steps.deprecations.outputs.deprecations-pulp }}
      deprecations-azure: ${{ steps.deprecations.outputs.deprecations-azure }}
      deprecations-s3: ${{ steps.deprecations.outputs.deprecations-s3 }}

    defaults:
      run:
        working-directory: pulp_catdog

    steps:
      - uses: actions/checkout@v2
        with:
          path: plugin_template
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Bootstrap catdog plugin
        working-directory: plugin_template
        run: |
          .ci/bootstrap_catdog.sh

  # Below this line we include the steps of the ci workflow of the generated plugin

      - name: Install httpie
        run: |
          echo ::group::HTTPIE
          pip install httpie
          echo ::endgroup::
          echo "HTTPIE_CONFIG_DIR=$GITHUB_WORKSPACE/.ci/assets/httpie/" >> $GITHUB_ENV

      - name: Set environment variables
        run: |
          echo "TEST=${{ matrix.env.TEST }}" >> $GITHUB_ENV

      - name: Before Install

        run: .github/workflows/scripts/before_install.sh
        shell: bash
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          GITHUB_PULL_REQUEST: ${{ github.event.number }}
          GITHUB_PULL_REQUEST_BODY: ${{ github.event.pull_request.body }}
          GITHUB_BRANCH: ${{ github.head_ref }}
          GITHUB_REPO_SLUG: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_CONTEXT: ${{ github.event.pull_request.commits_url }}

      - name: Install

        run: .github/workflows/scripts/install.sh
        shell: bash
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          GITHUB_PULL_REQUEST: ${{ github.event.number }}
          GITHUB_PULL_REQUEST_BODY: ${{ github.event.pull_request.body }}
          GITHUB_BRANCH: ${{ github.head_ref }}
          GITHUB_REPO_SLUG: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_CONTEXT: ${{ github.event.pull_request.commits_url }}

      - name: Install Python client

        run: .github/workflows/scripts/install_python_client.sh
        shell: bash

      - name: Install Ruby client
        if: ${{ env.TEST == 'bindings' }}
        run: .github/workflows/scripts/install_ruby_client.sh
        shell: bash

      - name: Before Script

        run: .github/workflows/scripts/before_script.sh
        shell: bash
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          GITHUB_PULL_REQUEST: ${{ github.event.number }}
          GITHUB_PULL_REQUEST_BODY: ${{ github.event.pull_request.body }}
          GITHUB_BRANCH: ${{ github.head_ref }}
          GITHUB_REPO_SLUG: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_CONTEXT: ${{ github.event.pull_request.commits_url }}
          REDIS_DISABLED: ${{ contains('s3', matrix.env.TEST) }}

      - name: Setting secrets
        if: github.event_name != 'pull_request'
        run: python3 .github/workflows/scripts/secrets.py "$SECRETS_CONTEXT"
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}

      - name: Script

        run: .github/workflows/scripts/script.sh
        shell: bash
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          GITHUB_PULL_REQUEST: ${{ github.event.number }}
          GITHUB_PULL_REQUEST_BODY: ${{ github.event.pull_request.body }}
          GITHUB_BRANCH: ${{ github.head_ref }}
          GITHUB_REPO_SLUG: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_CONTEXT: ${{ github.event.pull_request.commits_url }}

      - name: Extract Deprecations from Logs
        id: deprecations
        run: echo "::set-output name=deprecations-${{ matrix.env.TEST }}::$(docker logs pulp 2>&1 | grep -i pulpcore.deprecation | base64)"

      - name: Logs
        if: always()
        run: |
          echo "Need to debug? Please check: https://github.com/marketplace/actions/debugging-with-tmate"
          http --timeout 30 --check-status --pretty format --print hb https://pulp/pulp/api/v3/status/ || true
          docker images || true
          docker ps -a || true
          docker logs pulp || true
          docker exec pulp ls -latr /etc/yum.repos.d/ || true
          docker exec pulp cat /etc/yum.repos.d/* || true
          docker exec pulp pip3 list


  deprecations:
    runs-on: ubuntu-latest
    if: always()
    needs: test
    steps:
      - name: Fail on deprecations
        run: |
          test -z "${{ needs.test.outputs.deprecations-pulp }}"
          test -z "${{ needs.test.outputs.deprecations-azure }}"
          test -z "${{ needs.test.outputs.deprecations-s3 }}"
      - name: Print deprecations
        if: failure()
        run: |
          echo "${{ needs.test.outputs.deprecations-pulp }}" | base64 -d
          echo "${{ needs.test.outputs.deprecations-azure }}" | base64 -d
          echo "${{ needs.test.outputs.deprecations-s3 }}" | base64 -d



