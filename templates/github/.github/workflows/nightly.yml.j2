{% include 'header.j2' %}
---
name: {{ plugin_camel_short | default("Pulp") }} Nightly CI/CD
on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    # runs at 3:00 UTC daily
    - cron: '00 3 * * *'

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        env:
          - TEST: pulp
          {%- if docs_test %}
          - TEST: docs
          {%- endif %}
          {%- if test_s3 %}
          - TEST: s3
          {%- endif %}
          {%- if (deploy_daily_client_to_pypi or deploy_daily_client_to_rubygems) and not test_bindings %}
          - TEST: generate-bindings
          {%- elif test_bindings  %}
          - TEST: bindings
          {%- endif %}
          {%- if test_released_plugin_with_next_pulpcore_release %}
          - TEST: plugin-from-pypi
          {%- endif %}

    steps:
      - uses: actions/checkout@v2
        with:
          # by default, it uses a depth of 1
          # this fetches all history so that we can read each commit
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: "{{ python_version }}"

      - name: Install httpie
        run: |
          echo ::group::HTTPIE
          sudo apt-get update -yq
          sudo -E apt-get -yq --no-install-suggests --no-install-recommends install httpie
          echo ::endgroup::
          echo "HTTPIE_CONFIG_DIR=$GITHUB_WORKSPACE/.ci/assets/httpie/" >> $GITHUB_ENV
          echo "TEST={{ "${{ matrix.env.TEST }}" }}" >> $GITHUB_ENV

      - name: Before Install
        run: .github/workflows/scripts/before_install.sh
        shell: bash

      - uses: ruby/setup-ruby@v1
        if: {{ "${{ env.TEST == 'bindings' || env.TEST == 'generate-bindings' }}" }}
        with:
          ruby-version: "2.6"

      - name: Install
        run: .github/workflows/scripts/install.sh
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
        shell: bash

      - name: Before Script
        run: |
          .github/workflows/scripts/before_script.sh

      - name: Setting secrets
        run: python3 .github/workflows/scripts/secrets.py "$SECRETS_CONTEXT"
        env:
          SECRETS_CONTEXT: {{ "${{ toJson(secrets) }}" }}

      - name: Install Python client
        run: .github/workflows/scripts/install_python_client.sh

      - name: Install Ruby client
        if: {{ "${{ env.TEST == 'bindings' || env.TEST == 'generate-bindings' }}" }}
        run: .github/workflows/scripts/install_ruby_client.sh

      - name: Script
        run: .github/workflows/scripts/script.sh
        shell: bash

      - name: Upload python client packages
        if: {{ "${{ env.TEST == 'bindings' || env.TEST == 'generate-bindings' }}" }}
        uses: actions/upload-artifact@v2
        with:
          name: python-client.tar
          path: python-client.tar

      - name: Upload ruby client packages
        if: {{ "${{ env.TEST == 'bindings' || env.TEST == 'generate-bindings' }}" }}
        uses: actions/upload-artifact@v2
        with:
          name: ruby-client.tar
          path: ruby-client.tar

      - name: Upload built docs
        if: {{ "${{ env.TEST == 'docs' }}" }}
        uses: actions/upload-artifact@v2
        with:
          name: docs.tar
          path: docs/docs.tar

      - name: After failure
        if: failure()
        run: |
          http --timeout 30 --check-status --pretty format --print hb {{ pulp_scheme }}://pulp/pulp/api/v3/status/ || true
          docker images || true
          docker ps -a || true
          docker logs pulp || true
          docker exec pulp ls -latr /etc/yum.repos.d/ || true
          docker exec pulp cat /etc/yum.repos.d/* || true
          docker exec pulp pip3 list
          {%- if plugin_name == 'pulp_rpm' %}
          docker exec pulp ls -latr /etc/yum.repos.d/
          docker exec pulp cat /etc/yum.repos.d/*
          {%- endif %}

  publish:
    runs-on: ubuntu-latest
    needs: test

    env:
      TEST: publish

    steps:
      - uses: actions/checkout@v2
        with:
          # by default, it uses a depth of 1
          # this fetches all history so that we can read each commit
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: "{{ python_version }}"

      - uses: actions/setup-ruby@v1
        with:
          ruby-version: "2.6"

      - name: Install httpie
        run: |
          echo ::group::HTTPIE
          sudo apt-get update -yq
          sudo -E apt-get -yq --no-install-suggests --no-install-recommends install httpie
          echo ::endgroup::
          echo "HTTPIE_CONFIG_DIR=$GITHUB_WORKSPACE/.ci/assets/httpie/" >> $GITHUB_ENV

      - name: Install python dependencies
        run: |
          echo ::group::PYDEPS
          pip install wheel
          echo ::endgroup::

      - name: Before Install
        run: .github/workflows/scripts/before_install.sh
        shell: bash

      - name: Install
        run: .github/workflows/scripts/install.sh
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
        shell: bash

      - name: Install Python client
        run: .github/workflows/scripts/install_python_client.sh

      - name: Install Ruby client
        if: {{ "${{ env.TEST == 'bindings' }} || env.TEST == 'generate-bindings' }}" }}
        run: .github/workflows/scripts/install_ruby_client.sh

      - name: Before Script
        run: .github/workflows/scripts/before_script.sh

      - name: Setting secrets
        run: python3 .github/workflows/scripts/secrets.py "$SECRETS_CONTEXT"
        env:
          SECRETS_CONTEXT: {{ "${{ toJson(secrets) }}" }}

      {% if deploy_daily_client_to_rubygems %}
      - name: Download Ruby client
        uses: actions/download-artifact@v2
        with:
          name: python-client.tar

      - name: Untar Ruby client packages
        run: tar -xvf ruby-client.tar

      - name: Publish client to rubygems
        run: bash .github/workflows/scripts/publish_client_gem.sh
      {% endif %}

      {% if deploy_daily_client_to_pypi %}
      - name: Download Python client
        uses: actions/download-artifact@v2
        with:
          name: python-client.tar

      - name: Untar python client packages
        run: tar -xvf python-client.tar

      - name: Publish client to pypi
        run: bash .github/workflows/scripts/publish_client_pypi.sh
      {% endif %}

      {% if publish_docs_to_pulpprojectdotorg %}
      - name: Download built docs
        uses: actions/download-artifact@v2
        with:
          name: docs.tar

      - name: Publish docs to pulpproject.org
        run: |
          tar -xvf docs.tar -C ./docs
          .github/workflows/scripts/publish_docs.sh nightly ${GITHUB_REF##*/}
      {% endif %}

      - name: After failure
        if: failure()
        run: |
          http --timeout 30 --check-status --pretty format --print hb {{ pulp_scheme }}://pulp/pulp/api/v3/status/ || true
          docker images || true
          docker ps -a || true
          docker logs pulp || true
          docker exec pulp ls -latr /etc/yum.repos.d/ || true
          docker exec pulp cat /etc/yum.repos.d/* || true
          docker exec pulp pip3 list
          {%- if plugin_name == 'pulp_rpm' %}
          docker exec pulp ls -latr /etc/yum.repos.d/
          docker exec pulp cat /etc/yum.repos.d/*
          {%- endif %}

{%- if test_performance %}

  performance:
    runs-on: ubuntu-latest
    needs: test

    {%- if test_performance is iterable and test_performance|length > 1 %}
    strategy:
      fail-fast: false
      matrix:
        env:
        {%- for test in test_performance %}
          - PERFORMANCE_TEST: {{test}}
        {%- endfor %}
    {%- endif %}

    steps:
      - uses: actions/checkout@v2
        with:
          # by default, it uses a depth of 1
          # this fetches all history so that we can read each commit
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: "{{ python_version }}"

      - name: Install httpie
        run: |
          echo ::group::HTTPIE
          sudo apt-get update -yq
          sudo -E apt-get -yq --no-install-suggests --no-install-recommends install httpie
          echo ::endgroup::
          echo "TEST=performance" >> $GITHUB_ENV
          {%- if test_performance is iterable and test_performance|length > 1 %}
          echo "PERFORMANCE_TEST={{ "${{ matrix.env.PERFORMANCE_TEST }}" }}" >> $GITHUB_ENV
          {%- endif %}
          echo "HTTPIE_CONFIG_DIR=$GITHUB_WORKSPACE/.ci/assets/httpie/" >> $GITHUB_ENV

      - name: Install python dependencies
        run: |
          echo ::group::PYDEPS
          pip install wheel
          echo ::endgroup::

      - name: Before Install
        run: .github/workflows/scripts/before_install.sh
        shell: bash

      - name: Install
        run: .github/workflows/scripts/install.sh
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
        shell: bash

      - name: Install Python client
        run: .github/workflows/scripts/install_python_client.sh

      - name: Before Script
        run: .github/workflows/scripts/before_script.sh

      - name: Setting secrets
        run: python3 .github/workflows/scripts/secrets.py "$SECRETS_CONTEXT"
        env:
          SECRETS_CONTEXT: {{ "${{ toJson(secrets) }}" }}

      - name: Performance test
        run: .github/workflows/scripts/script.sh

      - name: After failure
        if: failure()
        run: |
          http --timeout 30 --check-status --pretty format --print hb {{ pulp_scheme }}://pulp/pulp/api/v3/status/ || true
          docker images || true
          docker ps -a || true
          docker logs pulp || true
          docker exec pulp ls -latr /etc/yum.repos.d/ || true
          docker exec pulp cat /etc/yum.repos.d/* || true
          docker exec pulp pip3 list
          {%- if plugin_name == 'pulp_rpm' %}
          docker exec pulp ls -latr /etc/yum.repos.d/
          docker exec pulp cat /etc/yum.repos.d/*
          {%- endif %}
{%- endif %}
