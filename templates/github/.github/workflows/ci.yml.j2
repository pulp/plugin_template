{% include 'header.j2' %}
{% from 'macros.j2' import
  set_env_vars,
  checkout,
  setup_python,
  setup_ruby,
  install_httpie,
  setup_env,
  display_logs,
  run_script,
  set_secrets,
  install_python_deps,
with context %}
---
name: {{ plugin_camel_short | default("Pulp") }} CI
on: {{ ci_trigger | default("{pull_request: {branches: ['*']}}") }}
jobs:

{% if pre_job_template -%}{{ "  " | indent }}{% include pre_job_template.path %}{%- endif %}

  {%- if single_commit_check %}
  single_commit:
    name: Assert single commit
    if: github.base_ref == '{{ plugin_default_branch }}'
    steps:
    - name: Checkout
      uses: actions/checkout@v1
      with:
        fetch-depth: 30
    - name: Checkout {{ plugin_default_branch }}
      run: git fetch origin {{ plugin_default_branch }}
    - name: create local {{ plugin_default_branch }} branch
      run: git branch {{ plugin_default_branch }} origin/{{ plugin_default_branch }}
    - name: Commit Count Check
      run: test `git log  --oneline --no-merges HEAD ^{{ plugin_default_branch }}  | wc -l ` = 1
    runs-on: ubuntu-latest
  {%- endif %}

  lint:
    runs-on: ubuntu-latest
    {% if pre_job_template %}needs: {{ pre_job_template.name }}{% endif %}

    steps:
      {{ checkout() | indent(6) }}

      {{ setup_python() | indent(6) }}

        # dev_requirements contains tools needed for flake8, etc.
      - name: Install requirements
        run: pip3 install -r dev_requirements.txt

      {% if check_commit_message -%}
      - name: Check commit message
        if: github.event_name == 'pull_request'
        env:
          {{ set_env_vars() | indent(10) }}
        run: sh .github/workflows/scripts/check_commit.sh
      {%- endif %}

      {% if black -%}
      # run black separately from flake8 to get a diff
      - name: Run black
        run: |
          black --version
          black --check --diff .
      {%- endif %}

      {% if flake8 -%}
      # Lint code.
      - name: Run flake8
        run: flake8 --config flake8.cfg
      {%- endif %}

      - name: Run extra lint checks
        run: "[ -x .ci/scripts/extra_linting.sh ] && .ci/scripts/extra_linting.sh"

      {% if check_manifest -%}
      # check for any files unintentionally left out of MANIFEST.in
      - name: Check manifest
        run: check-manifest
      {%- endif %}

      {% if check_stray_pulpcore_imports -%}
      - name: Check for pulpcore imports outside of pulpcore.plugin
        run: sh .ci/scripts/check_pulpcore_imports.sh
      {%- endif %}

      {% if check_gettext -%}
      - name: Check for gettext problems
        run: sh .ci/scripts/check_gettext.sh
      {%- endif %}

  test:
    runs-on: ubuntu-latest
    # run only after lint finishes
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        env:
          - TEST: pulp
          {%- if docs_test %}
          - TEST: docs
          {%- endif %}
          {%- if test_azure %}
          - TEST: azure
          {%- endif %}
          {%- if test_s3 %}
          - TEST: s3
          {%- endif %}
          {%- if test_bindings %}
          - TEST: bindings
          {%- endif %}
    outputs:
      deprecations-pulp: {{ "${{ steps.deprecations.outputs.deprecations-pulp }}" }}
      {%- if test_azure %}
      deprecations-azure: {{ "${{ steps.deprecations.outputs.deprecations-azure }}" }}
      {%- endif %}
      {%- if test_s3 %}
      deprecations-s3: {{ "${{ steps.deprecations.outputs.deprecations-s3 }}" }}
      {%- endif %}
      {%- if test_bindings %}
      deprecations-bindings: {{ "${{ steps.deprecations.outputs.deprecations-bindings }}" }}
      {%- endif %}

    steps:
      {{ checkout() | indent(6) }}

      {{ setup_python() | indent(6) }}

      {%- if test_bindings %}
      {{ setup_ruby() | indent(6) }}
      {%- endif %}

      {{ install_httpie() | indent(6) }}

      {{ setup_env() | indent(6) }}

      {{ run_script(name="Before Install", file="before_install.sh") | indent(6) }}

      {{ run_script(name="Install", file="install.sh") | indent(6) }}

      {{ run_script(name="Install Python client", file="install_python_client.sh", withenv=False) | indent(6) }}

      {{ run_script(name="Install Ruby client", file="install_ruby_client.sh", withenv=False, condition="${{ env.TEST == 'bindings' }}") | indent(6) }}

      {{ run_script(name="Before Script", file="before_script.sh", extra_env={"REDIS_DISABLED": "${{ contains('%s', matrix.env.TEST) }}" % (disabled_redis_runners | default([]) | join(' '))}) | indent(6) }}

      {{ set_secrets(condition="github.event_name != 'pull_request'") | indent(6) }}

      {{ run_script(name="Script", file="script.sh") | indent(6) }}

      - name: Extract Deprecations from Logs
        id: deprecations
        run: echo "::set-output name=deprecations-{{ "${{ matrix.env.TEST }}" }}::$(docker logs pulp 2>&1 | grep -i pulpcore.deprecation | base64 -w 0)"

      {{ display_logs() | indent(6) }}

{%- if upgrade_range %}

  upgrade:
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      fail-fast: false
      matrix:
        env:
        {%- if upgrade_range is iterable and upgrade_range|length > 0 %}
          {%- for test in upgrade_range %}
          - TEST: upgrade
            FROM_PULPCORE_BRANCH: "{{ test.pulpcore_branch }}"
            {%- for plugin_branch, version in test.items() if plugin_branch != "pulpcore_branch" %}
            FROM_{{ plugin_branch| upper| replace("-", "_") }}: "{{version}}"
            {%- endfor %}
          {%- endfor %}
        {%- else %}
          - TEST: upgrade
        {%- endif %}
    outputs:
      deprecations-upgrade: {{ "${{ steps.deprecations.outputs.deprecations-upgrade }}" }}

    steps:
      {{ checkout() | indent(6) }}

      {{ setup_python() | indent(6) }}

      {{ install_httpie() | indent(6) }}

      {{ setup_env(test="upgrade") | indent(6) }}

      {{ install_python_deps("wheel") | indent(6) }}

      {{ run_script(name="Before Install", file="before_install.sh") | indent(6) }}

      {{ run_script(name="Install", file="install.sh") | indent(6) }}

      {{ run_script(name="Install Python client", file="install_python_client.sh", withenv=False) | indent(6) }}

      {{ run_script(name="Before Script", file="before_script.sh", extra_env={"REDIS_DISABLED": "${{ contains('%s', matrix.env.TEST) }}" % (disabled_redis_runners | default([]) | join(' '))}) | indent(6) }}

      {{ set_secrets() | indent(6) }}

      {{ run_script(name="Upgrade Test", file="script.sh") | indent(6) }}

      - name: Extract Deprecations from Logs
        id: deprecations
        run: echo "::set-output name=deprecations-{{ "${{ matrix.env.TEST }}" }}::$(docker logs pulp 2>&1 | grep -i pulpcore.deprecation | base64 -w 0)"

      {{ display_logs() | indent(6) }}
{%- endif %}

{%- if test_deprecations %}
  deprecations:
    runs-on: ubuntu-latest
    if: always()
    needs: test
    steps:
      - name: Fail on deprecations
        run: |
          test -z "{{ "${{ needs.test.outputs.deprecations-pulp }}" }}"
          {%- if test_azure %}
          test -z "{{ "${{ needs.test.outputs.deprecations-azure }}" }}"
          {%- endif %}
          {%- if test_s3 %}
          test -z "{{ "${{ needs.test.outputs.deprecations-s3 }}" }}"
          {%- endif %}
          {%- if test_bindings %}
          test -z "{{ "${{ needs.test.outputs.deprecations-bindings }}" }}"
          {%- endif %}
          {%- if upgrade_range %}
          test -z "{{ "${{ needs.test.outputs.deprecations-upgrade }}" }}"
          {%- endif %}
      - name: Print deprecations
        if: failure()
        run: |
          echo "{{ "${{ needs.test.outputs.deprecations-pulp }}" }}" | base64 -d
          {%- if test_azure %}
          echo "{{ "${{ needs.test.outputs.deprecations-azure }}" }}" | base64 -d
          {%- endif %}
          {%- if test_s3 %}
          echo "{{ "${{ needs.test.outputs.deprecations-s3 }}" }}" | base64 -d
          {%- endif %}
          {%- if test_bindings %}
          echo "{{ "${{ needs.test.outputs.deprecations-bindings }}" }}" | base64 -d
          {%- endif %}
          {%- if upgrade_range %}
          echo "{{ "${{ needs.test.outputs.deprecations-upgrade }}" }}" | base64 -d
          {%- endif %}
{%- endif %}

{% if post_job_template -%}{{ "  " | indent }}{% include post_job_template.path %}{%- endif %}
