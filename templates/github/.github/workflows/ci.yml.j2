{% include 'header.j2' %}
{% from 'macros.j2' import
  checkout,
  install_python_deps,
  matrix_env,
  set_env_vars,
  setup_python,
with context %}
---
name: "{{ plugin_app_label | camel }} CI"
on: {{ ci_trigger | default("{pull_request: {branches: ['*']}}") }}

concurrency:
  group: {{ '${{ github.ref_name }}-${{ github.workflow }}' }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: "{{ plugin_name }}"

jobs:
  {%- if pre_job_template %}
  {% include pre_job_template.path | indent(2) %}
  {%- endif %}
  {%- if check_commit_message or lint_requirements %}
  check-commits:
    runs-on: "ubuntu-latest"
    steps:
      {{ checkout(depth=0, path=plugin_name) | indent(6) }}
      {{ setup_python() | indent(6) }}
      {%- if check_commit_message %}
      {{ install_python_deps(["requests", "pygithub", "pyyaml"]) | indent(6) }}
      - name: "Check commit message"
        if: github.event_name == 'pull_request'
        env:
          {{ set_env_vars() | indent(10) }}
        run: |
          .github/workflows/scripts/check_commit.sh
      {%- endif %}
  {%- endif %}

  check-changes:
    runs-on: ubuntu-latest
    outputs:
      run_tests: {{ '${{ steps.check.outputs.run_tests }}' }}
      run_docs: {{ '${{ steps.check.outputs.run_docs }}' }}
    steps:
      {{ checkout(depth=0, path=plugin_name) | indent(6) }}

      {{ setup_python("3.12") | indent(6) }}

      {{ install_python_deps(["gitpython"]) | indent(6) }}

      - name: Analyze changed files
        shell: bash
        id: check
        run: |
          # We only test docs on the default branch (usually main)
          if [[ "{{ '${{ github.base_ref }}' }}" == *"{{ plugin_default_branch }}" ]]; then
            echo "run_docs=1" >> $GITHUB_OUTPUT
          else
            echo "run_docs=0" >> $GITHUB_OUTPUT
          fi

          set +e
          BASE_REF={{ "${{ github.event.pull_request.base.sha }}" }}
          echo "Checking against:"
          git name-rev $BASE_REF
          python3 .ci/scripts/skip_tests.py . $BASE_REF
          exit_code=$?
          if [ $exit_code -ne 0 ] && [ $exit_code -ne 1 ]; then
            echo "Error: skip_tests.py returned unexpected exit code $exit_code"
            exit $exit_code
          fi
          echo "run_tests=$exit_code" >> $GITHUB_OUTPUT

  {%- if is_pulpdocs_member %}

  docs:
    needs: "check-changes"
    uses: "./.github/workflows/docs.yml"
    with:
      run_docs: {{ '${{ needs.check-changes.outputs.run_docs }}' }}
  {%- endif %}

  lint:
    needs:
      - "check-changes"
      {%- if pre_job_template %}
      - "{{ pre_job_template.name }}"
      {%- endif %}
    if: needs.check-changes.outputs.run_tests == '1'
    uses: "./.github/workflows/lint.yml"

  build:
    needs: "lint"
    uses: "./.github/workflows/build.yml"

  test:
    needs: "build"
    uses: "./.github/workflows/test.yml"
    with:
      matrix_env: |
        {{ matrix_env() | from_yaml | tojson }}
  {%- if test_deprecations %}

  deprecations:
    runs-on: "ubuntu-latest"
    if: github.base_ref == '{{ plugin_default_branch }}'
    needs: "test"
    steps:
      - name: "Create working directory"
        run: |
          mkdir -p "{{ plugin_name }}"
        working-directory: "."
      - name: "Download Deprecations"
        uses: actions/download-artifact@v4
        with:
          pattern: "deprecations-*"
          path: "{{ plugin_name }}"
          merge-multiple: true
      - name: "Print deprecations"
        run: |
          cat deprecations-*.txt | sort -u
          ! cat deprecations-*.txt | grep '[^[:space:]]'
  {%- endif %}

  ready-to-ship:
    # This is a dummy dependent task to have a single entry for the branch protection rules.
    runs-on: "ubuntu-latest"
    needs:
      - "check-changes"
      {%- if check_commit_message or lint_requirements %}
      - "check-commits"
      {%- endif %}
      - "lint"
      - "test"
      {%- if is_pulpdocs_member %}
      - "docs"
      {%- endif %}
    if: "always()"
    steps:
      - name: "Collect needed jobs results"
        working-directory: "."
        run: |
          RUN_TESTS={{ "${{ needs.check-changes.outputs.run_tests }}" }}
          RUN_DOCS={{ "${{ needs.check-changes.outputs.run_docs }}" }}

          check_jobs() {
            local filter="$1"
            local needs_json={{ "'${{toJson(needs)}}'" }}
            # output failed jobs after filter
            echo "$needs_json" | jq -r "to_entries[]|select($filter)|select(.value.result!=\"success\")|.key + \": \" + .value.result"
            # fails if not all selected jobs passed
            echo "$needs_json" | jq -e "to_entries|map(select($filter))|map(select(.value.result!=\"success\"))|length == 0"
          }

          if [ "$RUN_TESTS" == "1" ] && [ "$RUN_DOCS" == "1" ]; then
            FILTERS="true"  # check all jobs
          elif [ "$RUN_TESTS" == "1" ] && [ "$RUN_DOCS" == "0" ]; then
            echo "Skipping docs: running on non-default branch"
            FILTERS='.key != "docs"'
          elif [ "$RUN_TESTS" == "0" ] && [ "$RUN_DOCS" == "1" ]; then
            echo "Skipping tests: only doc changes"
            FILTERS='.key != "lint" and .key != "test"'
          else  # RUN_TESTS=0, RUN_DOCS=0
            echo "What is this PR doing??"
            FILTERS='.key != "lint" and .key != "test" and .key != "docs"'
          fi

          check_jobs "$FILTERS"
          echo "CI says: Looks good!"

{%- if post_job_template %}
  {% include post_job_template.path | indent (2) %}
{%- endif %}
