#!/usr/bin/env bash

{% include 'header.j2' %}

# make sure this script runs at the repo root
cd "$(dirname "$(realpath -e "$0")")"/../../..
REPO_ROOT="$PWD"

set -euv

shopt -s expand_aliases
source .github/workflows/scripts/utils.sh

export PULP_API_ROOT="{{ api_root }}"

if [[ "$TEST" = "docs" || "$TEST" = "publish" ]]; then
{%- if plugin_name == 'pulpcore' %}
  pip install psycopg2-binary
{%- else %}
  pip install -r ../pulpcore/doc_requirements.txt
{%- endif %}
  pip install -r doc_requirements.txt
fi

cd .ci/ansible/

TAG=ci_build

{#- For pulpcore, and any other repo that might check out some plugin PR #}
{%- for item in additional_repos %}
{%- if item.branch %}
if [ -e $REPO_ROOT/../{{ item.name }} ]; then
  {{ item.name | upper | replace("-", "_") }}=./{{ item.name }}
else
  {{ item.name | upper | replace("-", "_") }}=git+https://github.com/{{item.org | default("pulp")}}/{{ item.name }}.git@{{ item.branch }}
fi
{%- else %}
{{ item.name | upper | replace("-", "_") }}=git+https://github.com/{{item.org | default("pulp")}}/{{ item.name }}.git@{{ item.revision }}#egg={{ item.name | replace("_", "-") }}
{%- endif %}
{%- endfor %}

{%- if plugin_name != 'pulpcore' %}
{%- if pulpcore_revision %}
PULPCORE=git+https://github.com/pulp/pulpcore.git@{{ pulpcore_revision }}#egg=pulpcore
{%- else %}
PULPCORE=./pulpcore
{%- endif %}
if [[ "$TEST" == "plugin-from-pypi" ]]; then
  PLUGIN_NAME={{ plugin_name }}
elif [[ "${RELEASE_WORKFLOW:-false}" == "true" ]]; then
  PLUGIN_NAME=./{{ plugin_name }}/dist/{{ plugin_snake }}-$PLUGIN_VERSION-py3-none-any.whl
else
  PLUGIN_NAME=./{{ plugin_name }}
fi
if [[ "${RELEASE_WORKFLOW:-false}" == "true" ]]; then
  # Install the plugin only and use published PyPI packages for the rest
  # Quoting ${TAG} ensures Ansible casts the tag as a string.
  cat >> vars/main.yaml << VARSYAML
image:
  name: pulp
  tag: "${TAG}"
plugins:
  - name: pulpcore
    source: pulpcore{{ pulpcore_pip_version_specifier | default(omit, true) }}
  - name: {{ plugin_name }}
    source:  "${PLUGIN_NAME}"
{%- for item in additional_repos %}
  - name: {{ item.name }}
    source: {{ item.name }}{{ item.pip_version_specifier | default(omit, true) }}
{%- endfor %}
  - name: pulp-smash
    source: ./pulp-smash
VARSYAML
else
  cat >> vars/main.yaml << VARSYAML
image:
  name: pulp
  tag: "${TAG}"
plugins:
  - name: {{ plugin_name }}
    source: "${PLUGIN_NAME}"
{%- for item in additional_repos %}
  - name: {{ item.name }}
    source: ${{ item.name|upper| replace("-", "_") }}
{%- endfor %}
  - name: pulpcore
    source: "${PULPCORE}"
  - name: pulp-smash
    source: ./pulp-smash
VARSYAML
fi
{%- else %}
if [[ "${RELEASE_WORKFLOW:-false}" == "true" ]]; then
  PLUGIN_NAME=./{{ plugin_name }}/dist/{{ plugin_snake }}-$PLUGIN_VERSION-py3-none-any.whl
else
  PLUGIN_NAME=./{{ plugin_name }}
fi
cat >> vars/main.yaml << VARSYAML
image:
  name: pulp
  tag: "${TAG}"
plugins:
  - name: pulpcore
    source: "${PLUGIN_NAME}"
{%- for item in additional_repos %}
  - name: {{ item.name }}
    source: ${{ item.name|upper| replace("-", "_") }}
{%- endfor %}
  - name: pulp-smash
    source: ./pulp-smash
VARSYAML
{%- endif %}

cat >> vars/main.yaml << VARSYAML
services:
  - name: pulp
    image: "pulp:${TAG}"
    volumes:
      - ./settings:/etc/pulp
      - ./ssh:/keys/
      - ~/.config:/var/lib/pulp/.config
      - ../../../pulp-openapi-generator:/root/pulp-openapi-generator
    env:
      PULP_WORKERS: "4"
VARSYAML

cat >> vars/main.yaml << VARSYAML
pulp_settings: {{ pulp_settings | tojson }}
pulp_scheme: {{ pulp_scheme }}
{% if python_version == "3.6" %}
pulp_container_tag: python36
{% else %}
pulp_container_tag: {{ 'https' if pulp_scheme == 'https' else 'latest' }}
{% endif %}
VARSYAML

{%- if docker_fixtures %}

SCENARIOS=("pulp" "performance" "azure" "s3" "stream" "plugin-from-pypi" "generate-bindings")
if [[ " ${SCENARIOS[*]} " =~ " ${TEST} " ]]; then
  sed -i -e '/^services:/a \
  - name: pulp-fixtures\
    image: docker.io/pulp/pulp-fixtures:latest\
    env: {BASE_URL: "http://pulp-fixtures:8080"}' vars/main.yaml
fi
{%- endif %}

{%- if test_stream %}
if [ "$TEST" == 'stream' ]; then
  sed -i -e '/^services:/a \
  - name: ci-sftp\
    image: atmoz/sftp\
    volumes:\
      - ./ssh/id_ed25519.pub:/home/foo/.ssh/keys/id_ed25519.pub\
    command: "foo::::storage"' vars/main.yaml
  sed -i -e '$a stream_test: true\
pulp_scenario_settings: {{ pulp_settings_stream | tojson }}\
' vars/main.yaml
fi
{%- endif %}

{%- if test_s3 %}

if [ "$TEST" = "s3" ]; then
  export MINIO_ACCESS_KEY=AKIAIT2Z5TDYPX3ARJBA
  export MINIO_SECRET_KEY=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
  sed -i -e '/^services:/a \
  - name: minio\
    image: minio/minio\
    env:\
      MINIO_ACCESS_KEY: "'$MINIO_ACCESS_KEY'"\
      MINIO_SECRET_KEY: "'$MINIO_SECRET_KEY'"\
    command: "server /data"' vars/main.yaml
  sed -i -e '$a s3_test: true\
minio_access_key: "'$MINIO_ACCESS_KEY'"\
minio_secret_key: "'$MINIO_SECRET_KEY'"\
pulp_scenario_settings: {{ pulp_settings_s3 | tojson }}\
' vars/main.yaml

  {%- if test_reroute %}
  export PULP_API_ROOT="/rerouted/djnd/"
  {%- endif %}
fi
{%- endif %}

{%- if test_azure %}

if [ "$TEST" = "azure" ]; then
  mkdir -p azurite
  cd azurite
  openssl req -newkey rsa:2048 -x509 -nodes -keyout azkey.pem -new -out azcert.pem -sha256 -days 365 -addext "subjectAltName=DNS:ci-azurite" -subj "/C=CO/ST=ST/L=LO/O=OR/OU=OU/CN=CN"
  sudo cp azcert.pem /usr/local/share/ca-certificates/azcert.crt
  sudo dpkg-reconfigure ca-certificates
  cd ..
  sed -i -e '/^services:/a \
  - name: ci-azurite\
    image: mcr.microsoft.com/azure-storage/azurite\
    volumes:\
      - ./azurite:/etc/pulp\
    command: "azurite-blob --blobHost 0.0.0.0{% if pulp_scheme == "https" %} --cert /etc/pulp/azcert.pem --key /etc/pulp/azkey.pem{% endif %}"' vars/main.yaml
  sed -i -e '$a azure_test: true\
pulp_scenario_settings: {{ pulp_settings_azure | tojson }}\
' vars/main.yaml
fi
{%- endif %}

echo "PULP_API_ROOT=${PULP_API_ROOT}" >> "$GITHUB_ENV"

if [ "${PULP_API_ROOT:-}" ]; then
  sed -i -e '$a api_root: "'"$PULP_API_ROOT"'"' vars/main.yaml
fi

ansible-playbook build_container.yaml
ansible-playbook start_container.yaml

{%- if pulp_scheme == "https" %}
echo ::group::SSL
# Copy pulp CA
sudo docker cp pulp:/etc/pulp/certs/pulp_webserver.crt /usr/local/share/ca-certificates/pulp_webserver.crt

# Hack: adding pulp CA to certifi.where()
CERTIFI=$(python -c 'import certifi; print(certifi.where())')
cat /usr/local/share/ca-certificates/pulp_webserver.crt | sudo tee -a "$CERTIFI" > /dev/null
if [[ "$TEST" = "azure" ]]; then
  cat /usr/local/share/ca-certificates/azcert.crt | sudo tee -a "$CERTIFI" > /dev/null
fi

# Hack: adding pulp CA to default CA file
CERT=$(python -c 'import ssl; print(ssl.get_default_verify_paths().openssl_cafile)')
cat "$CERTIFI" | sudo tee -a "$CERT" > /dev/null

# Updating certs
sudo update-ca-certificates
echo ::endgroup::
{%- endif %}

if [[ "$TEST" = "azure" ]]; then
  {%- if pulp_scheme == "https" %}
  AZCERTIFI=$(/opt/az/bin/python3 -c 'import certifi; print(certifi.where())')
  cat /usr/local/share/ca-certificates/azcert.crt >> $AZCERTIFI
  cat /usr/local/share/ca-certificates/azcert.crt | cmd_stdin_prefix tee -a /usr/local/lib/python3.8/site-packages/certifi/cacert.pem > /dev/null
  cat /usr/local/share/ca-certificates/azcert.crt | cmd_stdin_prefix tee -a /etc/pki/tls/cert.pem > /dev/null
  {%- endif %}
  AZURE_STORAGE_CONNECTION_STRING='DefaultEndpointsProtocol={{ pulp_scheme }};AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint={{ pulp_scheme }}://ci-azurite:10000/devstoreaccount1;'
  az storage container create --name pulp-test --connection-string $AZURE_STORAGE_CONNECTION_STRING
fi

echo ::group::PIP_LIST
cmd_prefix bash -c "pip3 list && pip3 install pipdeptree && pipdeptree"
echo ::endgroup::
