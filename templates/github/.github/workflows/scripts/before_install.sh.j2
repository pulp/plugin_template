#!/usr/bin/env bash

{% include 'header.j2' %}

# make sure this script runs at the repo root
cd "$(dirname "$(realpath -e "$0")")"/../../..

set -mveuo pipefail

if [ "${GITHUB_REF##refs/heads/}" = "${GITHUB_REF}" ]
then
  BRANCH_BUILD=0
else
  BRANCH_BUILD=1
  BRANCH="${GITHUB_REF##refs/heads/}"
fi
if [ "${GITHUB_REF##refs/tags/}" = "${GITHUB_REF}" ]
then
  TAG_BUILD=0
else
  TAG_BUILD=1
  BRANCH="${GITHUB_REF##refs/tags/}"
fi

COMMIT_MSG=$(git log --format=%B --no-merges -1)
export COMMIT_MSG

if [[ "$TEST" == "upgrade" ]]; then
  git checkout -b ci_upgrade_test
  cp -R .github /tmp/.github
  cp -R .ci /tmp/.ci
  git checkout $FROM_{{ plugin_snake| upper| replace("-", "_") }}_BRANCH
  rm -rf .ci .github
  cp -R /tmp/.github .
  cp -R /tmp/.ci .
fi

if [[ "$TEST" == "plugin-from-pypi" ]]; then
  COMPONENT_VERSION=$(http https://pypi.org/pypi/{{ plugin_dash }}/json | jq -r '.info.version')
else
  COMPONENT_VERSION=$(sed -ne "s/\s*version.*=.*['\"]\(.*\)['\"][\s,]*/\1/p" setup.py)
fi
mkdir .ci/ansible/vars || true
echo "---" > .ci/ansible/vars/main.yaml
echo "legacy_component_name: {{ plugin_snake }}" >> .ci/ansible/vars/main.yaml
echo "component_name: {{ plugin_app_label }}" >> .ci/ansible/vars/main.yaml
echo "component_version: '${COMPONENT_VERSION}'" >> .ci/ansible/vars/main.yaml

export PRE_BEFORE_INSTALL=$PWD/.github/workflows/scripts/pre_before_install.sh
export POST_BEFORE_INSTALL=$PWD/.github/workflows/scripts/post_before_install.sh

if [ -f $PRE_BEFORE_INSTALL ]; then
  source $PRE_BEFORE_INSTALL
fi

if [[ -n $(echo -e $COMMIT_MSG | grep -P "Required PR:.*" | grep -v "https") ]]; then
  echo "Invalid Required PR link detected in commit message. Please use the full https url."
  exit 1
fi

if [ "$GITHUB_EVENT_NAME" = "pull_request" ] || [ "${BRANCH_BUILD}" = "1" -a "${BRANCH}" != "{{ plugin_default_branch }}" ]
then
{%- for repository in ["pulpcore", "pulp-smash", "pulp-openapi-generator", "pulp-cli"] %}
  export {{ repository | upper | replace("-", "_") }}_PR_NUMBER=$(echo $COMMIT_MSG | grep -oP 'Required\ PR:\ https\:\/\/github\.com\/pulp\/{{ repository }}\/pull\/(\d+)' | awk -F'/' '{print $7}')
{%- endfor %}
{%- for item in additional_repos %}
  export {{ item.name | upper | replace("-", "_") }}_PR_NUMBER=$(echo $COMMIT_MSG | grep -oP 'Required\ PR:\ https\:\/\/github\.com\/{{item.org | default("pulp")}}\/{{ item.name }}\/pull\/(\d+)' | awk -F'/' '{print $7}')
{%- endfor %}
  echo $COMMIT_MSG | sed -n -e 's/.*CI Base Image:\s*\([-_/[:alnum:]]*:[-_[:alnum:]]*\).*/ci_base: "\1"/p' >> .ci/ansible/vars/main.yaml
else
  {%- for repository in ["pulpcore", "pulp-smash", "pulp-openapi-generator", "pulp-cli"] + additional_repos | map(attribute="name") | list %}
  export {{ repository | upper | replace("-", "_") }}_PR_NUMBER=
{%- endfor %}
  export CI_BASE_IMAGE=
fi


cd ..

{% if plugin_name != 'pulpcore' %}
git clone --depth=1 https://github.com/pulp/pulp-smash.git

if [ -n "$PULP_SMASH_PR_NUMBER" ]; then
  cd pulp-smash
  git fetch --depth=1 origin pull/$PULP_SMASH_PR_NUMBER/head:$PULP_SMASH_PR_NUMBER
  git checkout $PULP_SMASH_PR_NUMBER
  cd ..
fi

pip install --upgrade --force-reinstall ./pulp-smash
{% endif %}

git clone --depth=1 https://github.com/pulp/pulp-openapi-generator.git
if [ -n "$PULP_OPENAPI_GENERATOR_PR_NUMBER" ]; then
  cd pulp-openapi-generator
  git fetch origin pull/$PULP_OPENAPI_GENERATOR_PR_NUMBER/head:$PULP_OPENAPI_GENERATOR_PR_NUMBER
  git checkout $PULP_OPENAPI_GENERATOR_PR_NUMBER
  cd ..
fi

{% if test_cli or upgrade_range %}
git clone --depth=1 https://github.com/pulp/pulp-cli.git
if [ -n "$PULP_CLI_PR_NUMBER" ]; then
  cd pulp-cli
  git fetch origin pull/$PULP_CLI_PR_NUMBER/head:$PULP_CLI_PR_NUMBER
  git checkout $PULP_CLI_PR_NUMBER
  cd ..
fi

cd pulp-cli
pip install -e .
pulp config create --base-url {{ pulp_scheme }}://pulp --location tests/cli.toml {% if pulp_scheme != 'https' %}--no-verify-ssl{% endif %}
mkdir ~/.config/pulp
cp tests/cli.toml ~/.config/pulp/cli.toml
cd ..
{% endif %}

{% if plugin_name != 'pulpcore' -%}
git clone --depth=1 https://github.com/pulp/pulpcore.git --branch {{ pulpcore_branch }}

cd pulpcore
{% if pulpcore_revision %}git checkout {{ pulpcore_revision }}{% endif %}
if [ -n "$PULPCORE_PR_NUMBER" ]; then
  git fetch --depth=1 origin pull/$PULPCORE_PR_NUMBER/head:$PULPCORE_PR_NUMBER
  git checkout $PULPCORE_PR_NUMBER
fi
cd ..
{% endif %}

{%- for plugin in additional_repos %}

git clone --depth=1 https://github.com/{{plugin.org | default("pulp")}}/{{ plugin.name }}.git --branch {{ plugin.branch }}
cd {{ plugin.name }}
{% if plugin.revision %}git checkout {{ plugin.revision }}{% endif %}
if [ -n "${{ plugin.name | upper | replace("-", "_") }}_PR_NUMBER" ]; then
  git fetch --depth=1 origin pull/${{ plugin.name | upper | replace("-", "_") }}_PR_NUMBER/head:${{ plugin.name | upper | replace("-", "_") }}_PR_NUMBER
  git checkout ${{ plugin.name | upper | replace("-", "_") }}_PR_NUMBER
fi

cd ..
{%- endfor %}

{% if upgrade_range %}
if [[ "$TEST" == "upgrade" ]]; then
  {%- for plugin_branch in upgrade_range[0].keys() if plugin_snake not in plugin_branch %}
  cd {{ plugin_branch| replace("_branch", "") }}
  git checkout -b ci_upgrade_test
  git fetch --depth=1 origin heads/$FROM_{{ plugin_branch| upper| replace("-", "_")}}:$FROM_{{ plugin_branch| upper| replace("-", "_")}}
  git checkout $FROM_{{ plugin_branch| upper| replace("-", "_")}}
  cd ..
  {%- endfor %}
fi
{% endif %}

# Intall requirements for ansible playbooks
pip install docker netaddr boto3 ansible

for i in {1..3}
do
  ansible-galaxy collection install amazon.aws && s=0 && break || s=$? && sleep 3
done
if [[ $s -gt 0 ]]
then
  echo "Failed to install amazon.aws"
  exit $s
fi

cd {{ plugin_name }}

if [ -f $POST_BEFORE_INSTALL ]; then
  source $POST_BEFORE_INSTALL
fi
