#!/usr/bin/env bash
# coding=utf-8

{% include 'header.j2' %}

# make sure this script runs at the repo root
cd "$(dirname "$(realpath -e "$0")")"/../../..
REPO_ROOT="$PWD"

set -mveuo pipefail

source .github/workflows/scripts/utils.sh

export POST_SCRIPT=$PWD/.github/workflows/scripts/post_script.sh
export POST_DOCS_TEST=$PWD/.github/workflows/scripts/post_docs_test.sh
export FUNC_TEST_SCRIPT=$PWD/.github/workflows/scripts/func_test_script.sh

# Needed for both starting the service and building the docs.
# Gets set in .github/settings.yml, but doesn't seem to inherited by
# this script.
export DJANGO_SETTINGS_MODULE=pulpcore.app.settings
export PULP_SETTINGS=$PWD/.ci/ansible/settings/settings.py

export PULP_URL="{{ pulp_scheme }}://pulp"

if [[ "$TEST" = "docs" ]]; then
  if [[ "$GITHUB_WORKFLOW" == "{{ plugin_camel_short | default("Pulp") }} CI" ]]; then
    pip install towncrier==19.9.0
    towncrier --yes --version 4.0.0.ci
  fi
  cd docs
  make PULP_URL="$PULP_URL" diagrams html
  tar -cvf docs.tar ./_build
  cd ..
{%- if check_openapi_schema %}

  echo "Validating OpenAPI schema..."
  cat $PWD/.ci/scripts/schema.py | cmd_stdin_prefix bash -c "cat > /tmp/schema.py"
  cmd_prefix bash -c "python3 /tmp/schema.py"
  cmd_prefix bash -c "pulpcore-manager spectacular --file pulp_schema.yml --validate"
{%- endif %}

  if [ -f $POST_DOCS_TEST ]; then
    source $POST_DOCS_TEST
  fi
  exit
fi

if [[ "${RELEASE_WORKFLOW:-false}" == "true" ]]; then
  STATUS_ENDPOINT="${PULP_URL}/pulp/api/v3/status/"
  {%- if test_reroute %}
  if [ "${PULP_API_ROOT:-}" ]; then
    STATUS_ENDPOINT="${PULP_URL}${PULP_API_ROOT}api/v3/status/"
  fi
  {%- endif %}
  echo $STATUS_ENDPOINT
  REPORTED_VERSION=$(http $STATUS_ENDPOINT | jq --arg plugin {{ plugin_app_label }} --arg legacy_plugin {{ plugin_snake }} -r '.versions[] | select(.component == $plugin or .component == $legacy_plugin) | .version')
  response=$(curl --write-out %{http_code} --silent --output /dev/null https://pypi.org/project/{{ plugin_dash }}/$REPORTED_VERSION/)
  if [ "$response" == "200" ];
  then
    echo "{{ plugin_name }} $REPORTED_VERSION has already been released. Skipping running tests."
    exit
  fi
fi

if [[ "$TEST" == "plugin-from-pypi" ]]; then
  COMPONENT_VERSION=$(http https://pypi.org/pypi/{{ plugin_dash }}/json | jq -r '.info.version')
  git checkout ${COMPONENT_VERSION} -- {{ plugin_name }}/tests/
fi

cd ../pulp-openapi-generator
{%- if plugin_name != 'pulpcore' %}
./generate.sh pulpcore python
pip install ./pulpcore-client
rm -rf ./pulpcore-client
if [[ "$TEST" = 'bindings' ]]; then
  ./generate.sh pulpcore ruby 0
  cd pulpcore-client
  gem build pulpcore_client.gemspec
  gem install --both ./pulpcore_client-0.gem
fi
{%- endif %}
{%- for item in additional_repos if item.bindings | default(true) %}
./generate.sh {{ item.name | replace("-", "_") }} python
pip install ./{{ item.name | replace("-", "_") }}-client
rm -rf ./{{ item.name | replace("-", "_") }}-client
if [[ "$TEST" = 'bindings' ]]; then
  ./generate.sh {{ item.name }} ruby 0
  cd {{ item.name }}-client
  gem build {{ item.name }}_client.gemspec
  gem install --both ./{{ item.name }}_client-0.gem
  cd ..
fi
{%- endfor %}
cd $REPO_ROOT

if [[ "$TEST" = 'bindings' ]]; then
  if [ -f $REPO_ROOT/.ci/assets/bindings/test_bindings.py ]; then
    python $REPO_ROOT/.ci/assets/bindings/test_bindings.py
  fi
  if [ -f $REPO_ROOT/.ci/assets/bindings/test_bindings.rb ]; then
    ruby $REPO_ROOT/.ci/assets/bindings/test_bindings.rb
  fi
  exit
fi

cat unittest_requirements.txt | cmd_stdin_prefix bash -c "cat > /tmp/unittest_requirements.txt"
cmd_prefix pip3 install -r /tmp/unittest_requirements.txt

# check for any uncommitted migrations
echo "Checking for uncommitted migrations..."
cmd_prefix bash -c "django-admin makemigrations --check --dry-run"

if [[ "$TEST" != "upgrade" ]]; then
  # Run unit tests.
  cmd_prefix bash -c "PULP_DATABASES__default__USER=postgres pytest -v -r sx --color=yes -p no:pulpcore --pyargs {{ plugin_snake }}.tests.unit"
fi

# Run functional tests
{%- for repo in additional_repos %}
export PYTHONPATH=$REPO_ROOT/../{{repo.name}}${PYTHONPATH:+:${PYTHONPATH}}
{%- endfor %}
export PYTHONPATH=$REPO_ROOT${PYTHONPATH:+:${PYTHONPATH}}

{% if upgrade_range %}
if [[ "$TEST" == "upgrade" ]]; then
  # Handle app label change:
  sed -i "/require_pulp_plugins(/d" {{ plugin_snake }}/tests/functional/utils.py

  # Running pre upgrade tests:
  pytest -v -r sx --color=yes --pyargs --capture=no {{ plugin_snake }}.tests.upgrade.pre

  # Checking out ci_upgrade_test branch and upgrading plugins
  cmd_prefix bash -c "cd pulpcore; git checkout -f ci_upgrade_test; pip install --upgrade --force-reinstall ."
  {%- for plugin_branch in upgrade_range[0].keys() if plugin_branch != "pulpcore_branch" %}
  cmd_prefix bash -c "cd {{ plugin_branch| replace("_branch", "") }}; git checkout -f ci_upgrade_test; pip install ."
  {%- endfor %}

  # Migrating
  cmd_prefix bash -c "django-admin migrate --no-input"

  # Restarting single container services
  cmd_prefix bash -c "s6-svc -r /var/run/s6/services/pulpcore-api"
  cmd_prefix bash -c "s6-svc -r /var/run/s6/services/pulpcore-content"
  cmd_prefix bash -c "s6-svc -d /var/run/s6/services/pulpcore-resource-manager"
  cmd_prefix bash -c "s6-svc -d /var/run/s6/services/pulpcore-worker@1"
  cmd_prefix bash -c "s6-svc -d /var/run/s6/services/pulpcore-worker@2"
  cmd_prefix bash -c "s6-svc -u /var/run/s6/services/new-pulpcore-resource-manager"
  cmd_prefix bash -c "s6-svc -u /var/run/s6/services/new-pulpcore-worker@1"
  cmd_prefix bash -c "s6-svc -u /var/run/s6/services/new-pulpcore-worker@2"

  echo "Restarting in 60 seconds"
  sleep 60

  # Let's reinstall pulpcore so we can ensure we have the correct dependencies
  cd ../pulpcore
  git checkout -f ci_upgrade_test
  pip install --upgrade --force-reinstall . ../pulp-cli ../pulp-smash

  # Hack: adding pulp CA to certifi.where()
  CERTIFI=$(python -c 'import certifi; print(certifi.where())')
  cat /usr/local/share/ca-certificates/pulp_webserver.crt | sudo tee -a "$CERTIFI" > /dev/null

  # CLI commands to display plugin versions and content data
  pulp status
  pulp content list
  CONTENT_LENGTH=$(pulp content list | jq length)
  if [[ "$CONTENT_LENGTH" == "0" ]]; then
    echo "Empty content list"
    exit 1
  fi

  # Rebuilding bindings
  cd ../pulp-openapi-generator
  ./generate.sh pulpcore python
  pip install ./pulpcore-client
  {%- if plugin_name != 'pulpcore' %}
  ./generate.sh {{ plugin_snake }} python
  pip install ./{{ plugin_snake }}-client
  {%- endif %}
  {%- for item in additional_repos if item.bindings | default(true) %}
  ./generate.sh {{ item.name | replace("-", "_") }} python
  pip install ./{{ item.name | replace("-", "_") }}-client
  {%- endfor %}
  cd $REPO_ROOT

  # Running post upgrade tests
  git checkout ci_upgrade_test -- {{ plugin_snake }}/tests/
  pytest -v -r sx --color=yes --pyargs --capture=no {{ plugin_snake }}.tests.upgrade.post
  exit
fi
{% endif %}

if [[ "$TEST" == "performance" ]]; then
  if [[ -z ${PERFORMANCE_TEST+x} ]]; then
    pytest -vv -r sx --color=yes --pyargs --capture=no --durations=0 {{ plugin_snake }}.tests.performance
  else
    pytest -vv -r sx --color=yes --pyargs --capture=no --durations=0 {{ plugin_snake }}.tests.performance.test_$PERFORMANCE_TEST
  fi
  exit
fi

if [ -f $FUNC_TEST_SCRIPT ]; then
  source $FUNC_TEST_SCRIPT
else
{% if parallel_test_workers == 0 %}
    if [[ "$GITHUB_WORKFLOW" == "{{ plugin_camel_short | default("Pulp") }} Nightly CI/CD" ]]; then
        pytest -v -r sx --color=yes --pyargs {{ plugin_snake }}.tests.functional

    {%- for item in additional_repos if item.pytest_args | default(false) %}
        pytest -v -r sx --color=yes --pyargs {{ item.pytest_args }}
    {%- endfor %}
    else
        pytest -v -r sx --color=yes --pyargs {{ plugin_snake }}.tests.functional -m "not nightly"

    {%- for item in additional_repos if item.pytest_args | default(false) %}
        pytest -v -r sx --color=yes --pyargs {{ item.pytest_args }} -m "not nightly"
    {%- endfor %}
    fi
{% else %}
    if [[ "$GITHUB_WORKFLOW" == "{{ plugin_camel_short | default("Pulp") }} Nightly CI/CD" ]]; then
        pytest -v -r sx --color=yes --suppress-no-test-exit-code --pyargs {{ plugin_snake }}.tests.functional -m parallel -n {{ parallel_test_workers }}
        pytest -v -r sx --color=yes --pyargs {{ plugin_snake }}.tests.functional -m "not parallel"

    {%- for item in additional_repos if item.pytest_args | default(false) %}
        pytest -v -r sx --color=yes --suppress-no-test-exit-code --pyargs {{ item.pytest_args }} -m parallel -n {{ parallel_test_workers }}
        pytest -v -r sx --color=yes --pyargs {{ item.pytest_args }} -m "not parallel"
    {%- endfor %}
    else
        pytest -v -r sx --color=yes --suppress-no-test-exit-code --pyargs {{ plugin_snake }}.tests.functional -m "parallel and not nightly" -n {{ parallel_test_workers }}
        pytest -v -r sx --color=yes --pyargs {{ plugin_snake }}.tests.functional -m "not parallel and not nightly"

    {%- for item in additional_repos if item.pytest_args | default(false) %}
        pytest -v -r sx --color=yes --suppress-no-test-exit-code --pyargs {{ item.pytest_args }} -m "parallel and not nightly" -n {{ parallel_test_workers }}
        pytest -v -r sx --color=yes --pyargs {{ item.pytest_args }} -m "not parallel and not nightly"
    {%- endfor %}
    fi
{% endif %}
fi

{%- if test_cli %}
{%- if docker_fixtures %}
export PULP_FIXTURES_URL="http://pulp-fixtures:8080"
{%- endif %}
pushd ../pulp-cli
pytest -v -m {{ plugin_snake }}
popd
{%- endif %}

if [ -f $POST_SCRIPT ]; then
  source $POST_SCRIPT
fi
