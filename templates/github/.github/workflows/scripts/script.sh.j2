#!/usr/bin/env bash
# coding=utf-8

{% include 'header.j2' %}

# make sure this script runs at the repo root
cd "$(dirname "$(realpath -e "$0")")"/../../..
REPO_ROOT="$PWD"

set -mveuo pipefail

source .github/workflows/scripts/utils.sh

export POST_SCRIPT=$PWD/.github/workflows/scripts/post_script.sh
export POST_DOCS_TEST=$PWD/.github/workflows/scripts/post_docs_test.sh
export FUNC_TEST_SCRIPT=$PWD/.github/workflows/scripts/func_test_script.sh

# Needed for both starting the service and building the docs.
# Gets set in .github/settings.yml, but doesn't seem to inherited by
# this script.
export DJANGO_SETTINGS_MODULE=pulpcore.app.settings
export PULP_SETTINGS=$PWD/.ci/ansible/settings/settings.py

export PULP_URL="{{ pulp_scheme }}://pulp"

if [[ "$TEST" = "docs" ]]; then
  if [[ "$GITHUB_WORKFLOW" == "{{ plugin_camel_short | default("Pulp") }} CI" ]]; then
    pip install towncrier==19.9.0
    towncrier --yes --version 4.0.0.ci
  fi
  cmd_prefix bash -c "cd {{ plugin_name }}/docs; make diagrams html; tar -cvf docs.tar ./_build"
  docker cp pulp:/{{ plugin_name }}//docs/docs.tar docs.tar

  if [ -f $POST_DOCS_TEST ]; then
    source $POST_DOCS_TEST
  fi
  exit
fi

if [[ "${RELEASE_WORKFLOW:-false}" == "true" ]]; then
  STATUS_ENDPOINT="${PULP_URL}${PULP_API_ROOT}api/v3/status/"
  echo $STATUS_ENDPOINT
  REPORTED_VERSION=$(http $STATUS_ENDPOINT | jq --arg plugin {{ plugin_app_label }} --arg legacy_plugin {{ plugin_snake }} -r '.versions[] | select(.component == $plugin or .component == $legacy_plugin) | .version')
  response=$(curl --write-out %{http_code} --silent --output /dev/null https://pypi.org/project/{{ plugin_dash }}/$REPORTED_VERSION/)
  if [ "$response" == "200" ];
  then
    echo "{{ plugin_name }} $REPORTED_VERSION has already been released. Skipping running tests."
    exit
  fi
fi

if [[ "$TEST" == "plugin-from-pypi" ]]; then
  COMPONENT_VERSION=$(http https://pypi.org/pypi/{{ plugin_dash }}/json | jq -r '.info.version')
  git checkout ${COMPONENT_VERSION} -- {{ plugin_name }}/tests/
fi

echo "machine pulp
login admin
password password
" | cmd_stdin_prefix bash -c "cat > /root/.netrc"
cmd_stdin_prefix bash -c "chmod og-rw /root/.netrc"

cat unittest_requirements.txt | cmd_stdin_prefix bash -c "cat > /tmp/unittest_requirements.txt"
cat functest_requirements.txt | cmd_stdin_prefix bash -c "cat > /tmp/functest_requirements.txt"
cmd_prefix pip3 install -r /tmp/unittest_requirements.txt
cmd_prefix pip3 install -r /tmp/functest_requirements.txt
cmd_prefix pip3 install --upgrade ../pulp-smash

cd ../pulp-openapi-generator
{%- if plugin_name != 'pulpcore' %}
./generate.sh {{ plugin_snake }} python
cmd_prefix pip3 install /root/pulp-openapi-generator/{{ plugin_snake }}-client
sudo rm -rf ./{{ plugin_snake }}-client
./generate.sh pulpcore python
cmd_prefix pip3 install /root/pulp-openapi-generator/pulpcore-client
sudo rm -rf ./pulpcore-client
{%- endif %}
{%- for item in additional_repos if item.bindings | default(true) %}
./generate.sh {{ item.name | replace("-", "_") }} python
cmd_prefix pip3 install /root/pulp-openapi-generator/{{ item.name | replace("-", "_") }}-client
sudo rm -rf ./{{ item.name | replace("-", "_") }}-client
{%- endfor %}
cd $REPO_ROOT

CERTIFI=$(cmd_prefix python3 -c 'import certifi; print(certifi.where())')
cmd_prefix bash -c "cat /etc/pulp/certs/pulp_webserver.crt  | tee -a "$CERTIFI" > /dev/null"

# check for any uncommitted migrations
echo "Checking for uncommitted migrations..."
cmd_prefix bash -c "django-admin makemigrations --check --dry-run"

# Run unit tests.
cmd_prefix bash -c "PULP_DATABASES__default__USER=postgres pytest -v -r sx --color=yes -p no:pulpcore --pyargs {{ plugin_snake }}.tests.unit"

# Run functional tests
if [[ "$TEST" == "performance" ]]; then
  if [[ -z ${PERFORMANCE_TEST+x} ]]; then
    cmd_prefix bash -c "pytest -vv -r sx --color=yes --pyargs --capture=no --durations=0 {{ plugin_snake }}.tests.performance"
  else
    cmd_prefix bash -c "pytest -vv -r sx --color=yes --pyargs --capture=no --durations=0 {{ plugin_snake }}.tests.performance.test_$PERFORMANCE_TEST"
  fi
  exit
fi

if [ -f $FUNC_TEST_SCRIPT ]; then
  source $FUNC_TEST_SCRIPT
else
{% if parallel_test_workers == 0 %}
    if [[ "$GITHUB_WORKFLOW" == "{{ plugin_camel_short | default("Pulp") }} Nightly CI/CD" ]] || [[ "${RELEASE_WORKFLOW:-false}" == "true" ]]; then
        cmd_prefix bash -c "pytest -v -r sx --color=yes --pyargs {{ plugin_snake }}.tests.functional --nightly"

    {%- for item in additional_repos if item.pytest_args | default(false) %}
        cmd_prefix bash -c "pytest -v -r sx --color=yes --pyargs {{ item.pytest_args }} --nightly"
    {%- endfor %}

    {% if run_pulpcore_tests_for_plugins %}
        cmd_prefix bash -c "pytest -v -r sx --color=yes --suppress-no-test-exit-code --pyargs pulpcore.tests.functional -m 'from_pulpcore_for_all_plugins' --nightly"
    {% endif %}
    else
        cmd_prefix bash -c "pytest -v -r sx --color=yes --pyargs {{ plugin_snake }}.tests.functional"

    {%- for item in additional_repos if item.pytest_args | default(false) %}
        cmd_prefix bash -c "pytest -v -r sx --color=yes --pyargs {{ item.pytest_args }}"
    {%- endfor %}

    {% if run_pulpcore_tests_for_plugins %}
        cmd_prefix bash -c "pytest -v -r sx --color=yes --suppress-no-test-exit-code --pyargs pulpcore.tests.functional -m 'from_pulpcore_for_all_plugins'"
    {% endif %}
    fi
{% else %}
    if [[ "$GITHUB_WORKFLOW" == "{{ plugin_camel_short | default("Pulp") }} Nightly CI/CD" ]] || [[ "${RELEASE_WORKFLOW:-false}" == "true" ]]; then
        cmd_prefix bash -c "pytest -v -r sx --color=yes --suppress-no-test-exit-code --pyargs {{ plugin_snake }}.tests.functional -m parallel -n {{ parallel_test_workers }} --nightly"
        cmd_prefix bash -c "pytest -v -r sx --color=yes --pyargs {{ plugin_snake }}.tests.functional -m 'not parallel' --nightly"

    {%- for item in additional_repos if item.pytest_args | default(false) %}
        cmd_prefix bash -c "pytest -v -r sx --color=yes --suppress-no-test-exit-code --pyargs {{ item.pytest_args }} -m parallel -n {{ parallel_test_workers }} --nightly"
        cmd_prefix bash -c "pytest -v -r sx --color=yes --pyargs {{ item.pytest_args }} -m 'not parallel' --nightly"
    {%- endfor %}

    {% if run_pulpcore_tests_for_plugins %}
        cmd_prefix bash -c "pytest -v -r sx --color=yes --suppress-no-test-exit-code --pyargs pulpcore.tests.functional -m 'from_pulpcore_for_all_plugins and parallel' -n  {{ parallel_test_workers }} --nightly"
        cmd_prefix bash -c "pytest -v -r sx --color=yes --suppress-no-test-exit-code --pyargs pulpcore.tests.functional -m 'from_pulpcore_for_all_plugins and not parallel'  --nightly"
    {% endif %}
    else
        cmd_prefix bash -c "pytest -v -r sx --color=yes --suppress-no-test-exit-code --pyargs {{ plugin_snake }}.tests.functional -m parallel -n {{ parallel_test_workers }}"
        cmd_prefix bash -c "pytest -v -r sx --color=yes --pyargs {{ plugin_snake }}.tests.functional -m 'not parallel'"

    {%- for item in additional_repos if item.pytest_args | default(false) %}
        cmd_prefix bash -c "pytest -v -r sx --color=yes --suppress-no-test-exit-code --pyargs {{ item.pytest_args }} -m parallel -n {{ parallel_test_workers }}"
        cmd_prefix bash -c "pytest -v -r sx --color=yes --pyargs {{ item.pytest_args }} -m 'not parallel'"
    {%- endfor %}

    {% if run_pulpcore_tests_for_plugins %}
        cmd_prefix bash -c "pytest -v -r sx --color=yes --suppress-no-test-exit-code --pyargs pulpcore.tests.functional -m 'from_pulpcore_for_all_plugins and parallel' -n  {{ parallel_test_workers }}"
        cmd_prefix bash -c "pytest -v -r sx --color=yes --suppress-no-test-exit-code --pyargs pulpcore.tests.functional -m 'from_pulpcore_for_all_plugins and not parallel'"
    {% endif %}
    fi
{% endif %}
fi

{%- if test_cli %}
{%- if docker_fixtures %}
export PULP_FIXTURES_URL="http://pulp-fixtures:8080"
{%- endif %}
pushd ../pulp-cli
pip install -r test_requirements.txt
pytest -v -m {{ plugin_snake }}
popd
{%- endif %}

if [ -f $POST_SCRIPT ]; then
  source $POST_SCRIPT
fi
