{% include 'header.j2' %}
{% from 'macros.j2' import
  set_env_vars,
  checkout,
  setup_python,
  setup_ruby,
  install_httpie,
  setup_env,
  display_logs,
  run_script,
  set_secrets,
  install_python_deps,
  configure_git,
with context %}
---
name: Release Pipeline
on:
  workflow_dispatch:
    inputs:
      release:
        description: "Release tag (e.g. 3.2.1)"
        required: true
      before_script:
        description: |
          Bash code to run before script.sh is executed. This should only be used when re-running
          a workflow to correct some aspect of the docs. e.g.: git checkout origin/3.14 CHANGES.rst
        required: false

env:
  RELEASE_WORKFLOW: true

jobs:
  build-artifacts:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    steps:
      {{ checkout(depth=0) | indent(6) }}

      {{ setup_python(pyversion="3.8") | indent(6) }}

      {{ install_python_deps("packaging~=21.3 bandersnatch bump2version gitpython towncrier==19.9.0 wheel") | indent(6) }}

      {{ configure_git() | indent(6) }}

      {{ set_secrets() | indent(6) }}

      - name: Create the release commit, tag it, create a post-release commit, and build plugin package
        run: python .github/workflows/scripts/release.py {{ "${{ github.event.inputs.release }}" }}

      - name: 'Tar files'
        run: tar -cvf {{ plugin_name }}.tar .

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: {{ plugin_name }}.tar
          path: {{ plugin_name }}.tar
  test:
    needs: build-artifacts

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        env:
          - TEST: pulp
          {%- if docs_test %}
          - TEST: docs
          {%- endif %}
          {%- if test_azure %}
          - TEST: azure
          {%- endif %}
          {%- if test_gcp %}
          - TEST: gcp
          {%- endif %}
          {%- if test_s3 %}
          - TEST: s3
          {%- endif %}
          {%- if test_stream %}
          - TEST: stream
          {%- endif %}
          {%- if (deploy_client_to_pypi or deploy_client_to_rubygems) %}
          - TEST: generate-bindings
          {%- endif %}
          {%- if test_lowerbounds %}
          - TEST: lowerbounds
          {%- endif %}

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: {{ plugin_name }}.tar

      {{ setup_python() | indent(6) }}

      {%- if deploy_client_to_rubygems %}
      {{ setup_ruby() | indent(6) }}
      {%- endif %}

      - name: Untar repository
        run: |
          tar -xf {{ plugin_name }}.tar

      # update to the branch's latest ci files rather than the ones from the release tag. this is
      # helpful when there was a problem with the ci files during the release which needs to be
      # fixed after the release tag has been created
      - name: Update ci files
        run: |
          git checkout "origin/${GITHUB_REF##*/}" -- .ci
          git checkout "origin/${GITHUB_REF##*/}" -- .github

      {{ install_httpie() | indent(6) }}

      {{ setup_env() | indent(6) }}

      {{ run_script(name="Before Install", file="before_install.sh") | indent(6) }}

      - name: Install
        run: |
          export PLUGIN_VERSION={{ "${{ github.event.inputs.release }}" }}
          .github/workflows/scripts/install.sh
        env:
          {{ set_env_vars() | indent(10) }}
        shell: bash

      {{ run_script(name="Before Script", file="before_script.sh", extra_env={"REDIS_DISABLED": "${{ contains('%s', matrix.env.TEST) }}" % (disabled_redis_runners | default(["TILT"]) | join(' '))}) | indent(6) }}

      {{ set_secrets() | indent(6) }}

      {{ run_script(name="Install Python client", file="install_python_client.sh", withenv=False) | indent(6) }}

      {{ run_script(name="Install Ruby client", file="install_ruby_client.sh", withenv=False, condition="${{ env.TEST == 'bindings' || env.TEST == 'generate-bindings' }}") | indent(6) }}

      - name: Additional before_script
        run: {{ "${{ github.event.inputs.before_script }}" }}
        shell: bash

      {{ run_script(name="Script", file="script.sh", condition="${{ env.TEST != 'generate-bindings' }}") | indent(6) }}

      - name: Upload python client packages
        if: {{ "${{ env.TEST == 'bindings' || env.TEST == 'generate-bindings' }}" }}
        uses: actions/upload-artifact@v3
        with:
          name: python-client.tar
          path: python-client.tar

      - name: Upload python client docs
        if: {{ "${{ env.TEST == 'bindings' || env.TEST == 'generate-bindings' }}" }}
        uses: actions/upload-artifact@v3
        with:
          name: python-client-docs.tar
          path: python-client-docs.tar

      - name: Upload ruby client packages
        if: {{ "${{ env.TEST == 'bindings' || env.TEST == 'generate-bindings' }}" }}
        uses: actions/upload-artifact@v3
        with:
          name: ruby-client.tar
          path: ruby-client.tar

      {%- if docs_test %}
      - name: Upload built docs
        if: {{ "${{ env.TEST == 'docs' }}" }}
        uses: actions/upload-artifact@v3
        with:
          name: docs.tar
          path: docs/docs.tar
      {%- endif %}

      {{ display_logs() | indent(6) }}


  publish:
    runs-on: ubuntu-latest
    needs: test

    env:
      TEST: publish
      GITHUB_TOKEN: {{ "${{ secrets.GITHUB_TOKEN }}" }}

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: {{ plugin_name }}.tar

      {{ setup_python(pyversion="3.8") | indent(6) }}

      {{ setup_ruby() | indent(6) }}

      {{ configure_git() | indent(6) }}

      - name: Untar repository
        run: |
          tar -xf {{  plugin_name }}.tar

      # update to the branch's latest ci files rather than the ones from the release tag. this is
      # helpful when there was a problem with the ci files during the release which needs to be
      # fixed after the release tag has been created
      - name: Update ci files
        run: |
          git checkout "origin/${GITHUB_REF##*/}" -- .ci
          git checkout "origin/${GITHUB_REF##*/}" -- .github

      {{ set_secrets() | indent(6) }}

      {{ install_python_deps("gitpython requests packaging~=21.3 tweepy") | indent(6) }}

      - name: Push branch and tag to GitHub
        run: bash .github/workflows/scripts/push_branch_and_tag_to_github.sh {{ "${{ github.event.inputs.release }}" }}

      {%- if publish_docs_to_pulpprojectdotorg and docs_test %}
      - name: Download built docs
        uses: actions/download-artifact@v3
        with:
          name: docs.tar

      - name: Download Python client docs
        uses: actions/download-artifact@v3
        with:
          name: python-client-docs.tar

      - name: Publish docs to pulpproject.org
        run: |
          tar -xvf docs.tar -C ./docs
          .github/workflows/scripts/publish_docs.sh tag {{ "${{ github.event.inputs.release }}" }}
      {%- endif %}

      {%- if deploy_to_pypi %}
      - name: Deploy plugin to pypi
        run: bash .github/workflows/scripts/publish_plugin_pypi.sh {{ "${{ github.event.inputs.release }}" }}
      {%- endif %}

      {%- if deploy_client_to_pypi %}
      - name: Download Python client
        uses: actions/download-artifact@v3
        with:
          name: python-client.tar

      - name: Untar python client packages
        run: tar -xvf python-client.tar

      - name: Publish client to pypi
        run: bash .github/workflows/scripts/publish_client_pypi.sh
      {%- endif %}

      {%- if deploy_client_to_rubygems %}
      - name: Download Ruby client
        uses: actions/download-artifact@v3
        with:
          name: ruby-client.tar

      - name: Untar Ruby client packages
        run: tar -xvf ruby-client.tar

      - name: Publish client to rubygems
        run: bash .github/workflows/scripts/publish_client_gem.sh
      {%- endif %}

      {% if update_github -%}
      - name: Update GitHub
        continue-on-error: true
        run: |
          set -euv
          export COMMIT_MSG=$(git log --format=%B --no-merges -1)
          export GH_ISSUES=$(echo $COMMIT_MSG | grep -o "GH Issues: .*" | awk '{print $3}')
          pip install pygithub

          echo "GH Issues $GH_ISSUES"
          python .ci/scripts/update_github.py
      {%- endif %}

      - name: Tweet
        continue-on-error: true
        run: python .ci/scripts/tweet.py {{ "${{ github.event.inputs.release }}" }}

      - name: Create release on GitHub
        run: bash .github/workflows/scripts/create_release_from_tag.sh {{ "${{ github.event.inputs.release }}" }}
