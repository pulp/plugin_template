[tool.bumpversion]
# This section is managed by the plugin template. Do not edit manually.

current_version = "{{ current_version }}"
commit = false
tag = false
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<alpha>0a)?(?P<patch>\\d+)(\\.(?P<release>[a-z]+))?"
serialize = [
  "{major}.{minor}.{patch}.{release}",
  "{major}.{minor}.{patch}",
  "{major}.{minor}.{alpha}{patch}.{release}",
  "{major}.{minor}.{alpha}{patch}",
]

[tool.bumpversion.parts.alpha]
# This section is managed by the plugin template. Do not edit manually.

# This is sort of a hack. In PEP440 prerelease markers work quite differently.
# But this fits best with the way we have been doing release versions.
optional_value = "final"
values = [
  "0a",
  "final",
]
independent = true

[tool.bumpversion.parts.release]
# This section is managed by the plugin template. Do not edit manually.

optional_value = "prod"
values = [
  "dev",
  "prod",
]
{%- for plugin in plugins %}

[[tool.bumpversion.files]]
# This section is managed by the plugin template. Do not edit manually.

filename = "./{{ plugin.name | snake }}/app/{% if plugin.name == "pulpcore" %}apps{% else %}__init__{% endif %}.py"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""
{%- endfor %}
{%- if setup_py %}

[[tool.bumpversion.files]]
filename = "./setup.py"
{%- else %}

[[tool.bumpversion.files]]
# This section is managed by the plugin template. Do not edit manually.

filename = "./pyproject.toml"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""
{%- endif %}
